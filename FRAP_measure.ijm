{"payload":{"allShortcutsEnabled":true,"fileTree":{"FRAP_Measure":{"items":[{"name":"Create_Object_Collection.ijm","path":"FRAP_Measure/Create_Object_Collection.ijm","contentType":"file"},{"name":"FRAP_measure.ijm","path":"FRAP_Measure/FRAP_measure.ijm","contentType":"file"},{"name":"Morph_ROI.ijm","path":"FRAP_Measure/Morph_ROI.ijm","contentType":"file"},{"name":"README.md","path":"FRAP_Measure/README.md","contentType":"file"}],"totalCount":4},"":{"items":[{"name":"Align_Channels","path":"Align_Channels","contentType":"directory"},{"name":"Beads_FWHM","path":"Beads_FWHM","contentType":"directory"},{"name":"BitsAndBobs","path":"BitsAndBobs","contentType":"directory"},{"name":"Bleaching_Steps","path":"Bleaching_Steps","contentType":"directory"},{"name":"Camera_Calibration","path":"Camera_Calibration","contentType":"directory"},{"name":"Cell_Organization","path":"Cell_Organization","contentType":"directory"},{"name":"Cellpose","path":"Cellpose","contentType":"directory"},{"name":"Cluster_Job","path":"Cluster_Job","contentType":"directory"},{"name":"Colocalization_Analysis","path":"Colocalization_Analysis","contentType":"directory"},{"name":"Contour_Curvature","path":"Contour_Curvature","contentType":"directory"},{"name":"Count_Blobs_In_ROI","path":"Count_Blobs_In_ROI","contentType":"directory"},{"name":"Debluring","path":"Debluring","contentType":"directory"},{"name":"Detect_Spots","path":"Detect_Spots","contentType":"directory"},{"name":"Digital_Phase_Contrast","path":"Digital_Phase_Contrast","contentType":"directory"},{"name":"FRAP_Measure","path":"FRAP_Measure","contentType":"directory"},{"name":"FRC","path":"FRC","contentType":"directory"},{"name":"File_Conversion","path":"File_Conversion","contentType":"directory"},{"name":"GMM","path":"GMM","contentType":"directory"},{"name":"GUV_Intensity","path":"GUV_Intensity","contentType":"directory"},{"name":"Intensity_Profiles","path":"Intensity_Profiles","contentType":"directory"},{"name":"Line_Morphing","path":"Line_Morphing","contentType":"directory"},{"name":"Make_Figure","path":"Make_Figure","contentType":"directory"},{"name":"Pre Post synatic marker analysis","path":"Pre Post synatic marker analysis","contentType":"directory"},{"name":"Register_frames","path":"Register_frames","contentType":"directory"},{"name":"Shape_RAG_Rank","path":"Shape_RAG_Rank","contentType":"directory"},{"name":"T_Test","path":"T_Test","contentType":"directory"},{"name":"Template_Matching","path":"Template_Matching","contentType":"directory"},{"name":"Tetrahymena_Beat","path":"Tetrahymena_Beat","contentType":"directory"},{"name":"Tiles_Tools","path":"Tiles_Tools","contentType":"directory"},{"name":"Volumic_Intensity_Analysis","path":"Volumic_Intensity_Analysis","contentType":"directory"},{"name":".gitattributes","path":".gitattributes","contentType":"file"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"}],"totalCount":34}},"fileTreeProcessingTime":4.79704,"foldersToFetch":[],"reducedMotionEnabled":"system","repo":{"id":366682129,"defaultBranch":"main","name":"imagej-macro","ownerLogin":"jboulanger","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2021-05-12T11:47:24.000+01:00","ownerAvatar":"https://avatars.githubusercontent.com/u/3415561?v=4","public":true,"private":false,"isOrgOwned":false},"symbolsExpanded":false,"treeExpanded":true,"refInfo":{"name":"main","listCacheKey":"v0:1620816448.483097","canEdit":true,"refType":"branch","currentOid":"cc339efa8fde38c7ae0260836184d211fa754009"},"path":"FRAP_Measure/FRAP_measure.ijm","currentUser":{"id":131262458,"login":"ymodis","userEmail":"ymodis@mrc-lmb.cam.ac.uk"},"blob":{"rawLines":["/*"," * FRAP intensity measure with manual motion correction"," * "," * Add several regions of interest to the ROI manager:"," *  - create a roi, optimize its position in x,y and pressing the keys g and z"," *  - add the ROI to the roi maanger (pressing u)"," *  "," *  Run the macro (press q)"," *  - set the radius for grouping ROIs"," *  - set the diameter of the measurement region"," *  "," *  Load the image with bioformat to get the correct frame interval froma LSM file."," *  "," * Jerome Boulanger 2020 for Yangci"," */","","","macro \"Measure Intensities [q]\" {\t","\tDialog.create(\"FRAP Measure intensities\");","\tDialog.addNumber(\"Grouping radius [px]\", 50);","\tDialog.addNumber(\"Measurement diameter [px]\", 10);","\tDialog.show();","\tR = Dialog.getNumber();","\tregion_size = Dialog.getNumber();\t","\tcmap = newArray(\"#aa0000\",\"#00aaaa\",\"#00aa00\",\"#aa00aa\",\"#0000aa\",\"#aabb55\");\t","\tid = getImageID;","\tOverlay.remove;","\tsetBatchMode(true);","\tdata = trackROI(R);\t\t","\tanalyseFrapRecovery(data);","\tsetBatchMode(false);","\tselectImage(id);","}","","","macro \"Optimize XY position [g]\" {","\tprint(\"\\\\Clear\");\t\t","\tgetVoxelSize(dx, dy, dz, unit);\t","\tfor (i = 0 ; i <10; i++) {","\t\tRoi.getBounds(x, y, width, height);\t\t","\t\txc = getValue(\"X\");","\t\tyc = getValue(\"Y\");","\t\txm = getValue(\"XM\");","\t\tym = getValue(\"YM\");","\t\tvx = (xm-xc)/dx;","\t\tvy = (ym-yc)/dy;","\t\tRoi.move(x+vx,y+vy);","\t}\t","\t//roiManager(\"update\");","}","","","macro \"Find Brightest Z plane [z]\" {","\tStack.getDimensions(width, height, channels, slices, frames);","\timax = 0;","\tzbest = 1;","\tfor (n = 1; n < slices; n++) {","\t\tStack.setSlice(n);","\t\tv = getValue(\"Mean\");","\t\tprint(\"z=\"+n+\" v=\"+v);","\t\tif (v > imax) {","\t\t\tzbest = n;","\t\t\timax = v;","\t\t}","\t}","\tStack.setSlice(zbest);","\t//roiManager(\"update\");","}","","","function analyseFrapRecovery(data) {","\tOverlay.remove;","\trun(\"Select None\");","\tn = getNumEntry(data);","\tL = getNumLabels(data);","\tStack.getUnits(X, Y, Z, Time, Value);","\tdt = Stack.getFrameInterval();","\tif (dt == 0) {","\t\tprint(\"Uncalibrated time interval\");","\t\tdt = 1;","\t}","\t// Display the ROI labels on the stack","\tlabels_str = newArray(L);\t","\tfor ( i = 0; i < L; i++) {","\t\tlabels_str[i] = \"ROI \"  + (i + 1);","\t\tfor (j = 0; j < n; j++) {","\t\t\tif (getVal(data,j,\"t\")==1 && getVal(data,j,\"label\")==i) {\t\t\t\t","\t\t\t\tOverlay.drawString(labels_str[i], getVal(data,j,\"x\"), getVal(data,j,\"y\") );\t","\t\t\t\tOverlay.setPosition(1,0,0);\t\t\t\t\t\t\t\t","\t\t\t}","\t\t}\t\t","\t}","\tOverlay.show();","\t","\t//  ask for identification of the ROI","\tStack.setPosition(1,0,0);","\ttxt = newArray(L);","\tperm = newArray(L);","\tfor (k = 0; k < L; k++) {\t\t","\t\tif (k == 0) { ","\t\t\ttxt[k] = \"FRAP\";","\t\t} else if (k == 1) {","\t\t\ttxt[k] = \"Background\";","\t\t} else if (k == 2) {","\t\t\ttxt[k] = \"Control\";","\t\t} else {","\t\t\ttxt[k] == \"Other\";","\t\t}","\t}","\tDialog.create(\"Frap recovery:ROI selection\");","\tDialog.addNumber(\"FRAP frame\", 3);\t","\tfor (k = 0; k < L; k++) {\t","\t\tDialog.addChoice(txt[k], labels_str, labels_str[k]);","\t}\t","\tDialog.show();","\tfrap_frame = Dialog.getNumber();","\tOverlay.remove();","\tfor (i = 0; i < L; i++) {\t","\t\tstr = Dialog.getChoice();\t","\t\tfor (j = 0; j < L; j++) {","\t\t\tif (matches(labels_str[j], str)) {\t\t\t\t","\t\t\t\tperm[i] = j;","\t\t\t\tfor (k = 0; k < n; k++) {\t\t\t\t","\t\t\t\t\tif (getVal(data,k,\"t\")==1 && getVal(data,k,\"label\")==j) {\t\t\t\t\t\t","\t\t\t\t\t\tsetColor(cmap[i]);","\t\t\t\t\t\tOverlay.drawString(txt[i], getVal(data,k,\"x\"), getVal(data,k,\"y\") );\t","\t\t\t\t\t\tOverlay.setPosition(1,0,0);\t","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}\t\t","\t}","\tOverlay.show();\t","\t","\t// export data to a table","\tcreateFrapResultTable(data,perm,txt);","\t","\t// create a graph","\tPlot.create(\"Intensity measure\", \"Time [\"+Time+\"]\", \"Intensity\");","\tPlot.setLineWidth(5);","\tfor (l = 0; l < perm.length; l++) {\t\t","\t\tPlot.setColor(cmap[perm[l]]);","\t\tX = getCurve(data, perm[l], \"t\");","\t\tfor (i = 0 ; i < X.length; i++) {","\t\t\tX[i] = X[i] * dt;","\t\t}","\t\tY = getCurve(data, perm[l], \"i\");\t\t","\t\tPlot.add(\"line\", X, Y);\t\t","\t}","\tPlot.setLegend(\"Frap\\nBackground\\nControl\");","\tPlot.setLimitsToFit();","\tPlot.update();","","\ta = newArray(1,2,3,4,5,6,7,8,9,10);","\ta = Array.slice(a,4,10);","\tArray.print(a);","","    // Final graph with curve fitting","\tif (dt == 0) {","\t\tprint(\"Uncalibrated time interval\");","\t\tdt = 1;","\t}","    Tm = getCurve(data, perm[0], \"t\");","    Im = getCurve(data, perm[0], \"i\");","    Bm = getCurve(data, perm[1], \"i\");","    Cm = getCurve(data, perm[2], \"i\");    ","    I0 = Im[frap_frame-1];","    I1 = Im[frap_frame];","    print(\"Intenity before bleaching :\" + I0);","    print(\"Intenity after bleaching :\" +  Im[frap_frame]);","    T = Array.slice(Tm, frap_frame, Tm.length-1);","    I = Array.slice(Im, frap_frame, Im.length-1);","    B = Array.slice(Bm, frap_frame, Bm.length-1);","    C = Array.slice(Cm, frap_frame, Cm.length-1);","    for (i = 0; i < T.length; i++) {","    \tT[i] = (T[i] - frap_frame - 1) * dt;","    \tC[i] = C[i] - B[i];    \t \t","    }","    Fit.doFit(\"Exponential\",T,C);","    bleaching_amp = Fit.p(0);","\tbleaching_rate = Fit.p(1);","\tprint(\"Acquisition bleaching amplitude \" + bleaching_amp);","\tprint(\"Acquisition bleaching rate \" + bleaching_rate);","\tfor (i = 0; i < T.length; i++) {","\t\tI[i] = (I[i] - I1) / (I0 - I1) * exp(-i*dt*bleaching_rate);\t","\t}","\tFit.doFit(\"Exponential Recovery (no offset)\",T,I);","\trec_amp = Fit.p(0);","\trec_rate = Fit.p(1);","\tprint(\"Recovery rate: \" + rec_rate + \"/\"+Time);","\tprint(\"Recovery amplitude: \" + rec_amp*100 + \"%\");","","\tM = newArray(T.length);","\tfor (i = 0; i < M.length; i++) {","\t\tM[i] = Fit.f(T[i]);","\t}","\tPlot.create(\"FRAP recovery \",\"Time [\"+Time+\"]\", \"Normalized Intensity\");","\tPlot.setLineWidth(5);","\tPlot.setColor(cmap[0]);\t","\tPlot.add(\"cricle\", T, I);","\tPlot.setColor(cmap[1]);\t","\tPlot.add(\"line\", T, M);","\tPlot.setLimitsToFit();","\tPlot.setLegend(\"Data\\nModel\");","\tPlot.update();","","\tArray.show(T,I);","}","","","// group ROI, interpolate the position in time and measure the intensity","// along the position over time","function trackROI(R) {","\tid  = getImageID();","\tprint(\"\\\\Clear\");\t","\tprint(\"ROI grouping\");","\tx = roi2feat();\t","\tL = groupFeat(x,R);","\tprint(\" -number of groups : \" + L);","\tcolorROIbyLabel(x);\t","\tprint(\"Interpolate and Measure\");","\trun(\"Select None\");","\ty = interpolate(x,L);","\treturn y;\t","}","","function createFrapResultTable(src,perm,txt) {","\tif (isOpen(\"Results\")) {","\t\tselectWindow(\"Results\");","\t\trun(\"Close\");","\t}","\tn = getNumEntry(src);","\tdt = Stack.getFrameInterval();\t","\tif (dt == 0) {","\t\tprint(\"Uncalibrated time interval\");","\t\tdt = 1;","\t}","\tStack.getUnits(X, Y, Z, Time, Value);","\tt = getCurve(src,0,\"t\");","\tfor (i = 0; i < n; i++) {","\t\tt = getVal(src,i,\"t\") - 1;","\t\tI = getVal(src,i,\"i\");","\t\tl = getVal(src,i,\"label\");\t\t","\t\t// find the column corresponding to this label","\t\tk = -1;","\t\tfor (j = 0; j < perm.length; j++)\t {","\t\t\tif (perm[j] == l) {","\t\t\t\tk = j;","\t\t\t}","\t\t}","\t\tif (k>=0) {","\t\t\tsetResult(\"T[\"+Time+\"]\", t, t*dt);","\t\t\tsetResult(txt[k], t, I);\t\t\t","\t\t}","\t}\t","}","/*","function createFrapResultTable(src) {","\tif (isOpen(\"Results\")) {","\t\tselectWindow(\"Results\");","\t\trun(\"Close\");","\t}","\tn = getNumEntry(src);","\tdt = Stack.getFrameInterval();\t","\tif (dt == 0) {","\t\tprint(\"Uncalibrated time interval\");","\t\tdt = 1;","\t}","\tStack.getUnits(X, Y, Z, Time, Value);","\tt = getCurve(src,0,\"t\");","\tfor (i = 0; i < n; i++) {","\t\tt = getVal(src,i,\"t\") - 1;","\t\tI = getVal(src,i,\"i\");","\t\tl = getVal(src,i,\"label\");\t\t","\t\tsetResult(\"T[\"+Time+\"]\", t, t*dt);\t\t","\t\tsetResult(\"I\"+(l+1), t, I);","\t}\t","}","*/","// get a values over time for a specific label and field","function getCurve(src,label,field) {\t\t","\tn = getNumEntry(src);","\tframes = 0;","\tfor (i = 0; i < n; i++) {","\t\tframes = maxOf(frames, getVal(src,i,\"t\"));","\t}","\tdst = newArray(frames);","\tts = newArray(frames);\t","\tj = 0;","\tfor (i = 0; i < n; i++) {","\t\tli = getVal(src,i,\"label\");","\t\t//print(li);","\t\tif (li == label) {","\t\t\t//print(\"ok \" + li +\"==\"+label+\" \"+j+\"/\"+frames);","\t\t\tif (j < frames) {","\t\t\t\tdst[j] = getVal(src,i,field);","\t\t\t\tts[j]  = getVal(src,i,\"t\");\t\t\t\t","\t\t\t\tj = j + 1;\t\t\t\t","\t\t\t}","\t\t}","\t}","\t// order the array by time points\t","\tr = Array.rankPositions(ts);","\tdsto = newArray(frames);","\tfor (i = 0; i < frames; i++) {","\t\tdsto[i] = dst[r[i]];","\t}","\treturn dsto;","}","","","function interpolate(x,L) {\t","\t/* Interpolate data in x with L labels over regular time points","\t * and measure intensities at the interpolated positions","\t */","\tStack.getDimensions(width, height, channels, slices, frames);","\ty = newArray(L*frames*6);","\tn = getNumEntry(x);","\t","\tfor (l = 0; l < L; l++) { // for each label","\t\t// determine first and last frame of the ROIs","\t\ttstart = 0;","\t\tistart = 0; // first element of x from label l","\t\ttend = 0;","\t\tiend = 0; // last element of x from label l","\t\tfor (i = 0; i < n; i++) {","\t\t\tli = getVal(x,i,\"label\");\t\t\t","\t\t\tif (li == L) {","\t\t\t\tt = getVal(x,i,\"t\");","\t\t\t\tif (t <= tstart) {","\t\t\t\t\ttstart = t;","\t\t\t\t\tistart = i;","\t\t\t\t}","\t\t\t\tif (t >= tend) {","\t\t\t\t\ttend = t;","\t\t\t\t\tiend = i;","\t\t\t\t}","\t\t\t}","\t\t}\t\t","\t\tfor (frame = 1; frame <= frames; frame++) { // for each frame","\t\t\t// find the control points","\t\t\tdt0 = -frames;","\t\t\ti0 = -1;\t\t\t","\t\t\tdt1 = frames;","\t\t\ti1 = -1;\t\t\t","\t\t\tfor (i = 0; i < n; i++) {\t","\t\t\t\tli = getVal(x,i,\"label\");\t\t\t","\t\t\t\tif (li == l) {","\t\t\t\t\tdt = getVal(x,i,\"t\") - frame;\t\t\t\t\t","\t\t\t\t\tif (dt <= 0 && dt > dt0) {\t\t\t\t\t\t","\t\t\t\t\t\tdt0 = dt;","\t\t\t\t\t\ti0 = i;","\t\t\t\t\t}","\t\t\t\t\tif  (dt >= 0 && dt < dt1) {","\t\t\t\t\t\tdt1 = dt;","\t\t\t\t\t\ti1 = i;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}\t\t\t\t\t","\t\t\t// interpolate","\t\t\tif (i0 != -1 && i1 != -1) {","\t\t\t\t//print(\"interpolating for frame \" + frame);\t\t\t","\t\t\t\txj = interp1val(getVal(x,i0,\"t\"), getVal(x,i0,\"x\"), getVal(x,i1,\"t\"), getVal(x,i1,\"x\"), frame);","\t\t\t\tyj = interp1val(getVal(x,i0,\"t\"), getVal(x,i0,\"y\"), getVal(x,i1,\"t\"), getVal(x,i1,\"y\"), frame);","\t\t\t\tzj = interp1val(getVal(x,i0,\"t\"), getVal(x,i0,\"z\"), getVal(x,i1,\"t\"), getVal(x,i1,\"z\"), frame);","\t\t\t} else {","\t\t\t\tif (i0 == -1) { // before the first","\t\t\t\t\txj = getVal(x,istart,\"x\");","\t\t\t\t\tyj = getVal(x,istart,\"y\");","\t\t\t\t\tzj = getVal(x,istart,\"z\");\t\t\t\t\t","\t\t\t\t}","\t\t\t\tif (i1 == -1) { // after the last","\t\t\t\t\txj = getVal(x,iend,\"x\");","\t\t\t\t\tyj = getVal(x,iend,\"y\");","\t\t\t\t\tzj = getVal(x,iend,\"z\");","\t\t\t\t}","\t\t\t}","\t\t\tj = (frame-1) + l * frames;","\t\t\tsetVal(y,j,\"x\", xj);","\t\t\tsetVal(y,j,\"y\", yj);","\t\t\tsetVal(y,j,\"z\", zj);","\t\t\tsetVal(y,j,\"t\", frame);\t\t\t","\t\t\trun(\"Select None\");","\t\t\tStack.setPosition(1, round(zj), frame);","\t\t\tmakeOval(xj-region_size/2,yj-region_size/2,region_size,region_size);\t","\t\t\tsetVal(y,j,\"i\", getValue(\"Mean\"));","\t\t\tsetVal(y,j,\"label\", l);\t\t\t","\t\t}","\t}","\treturn y;","}","","function interp1val(x1,y1,x2,y2,xq) {","\tval = 0;","\tif (abs(x1-x2) < 0.5) {","\t\tval = y1;","\t} else {","\t\tval = y1 + (xq-x1) * (y2-y1) / (x2-x1);","\t}","\treturn val;","}","","function colorROIbyLabel(x) {\t","\tn = getNumEntry(x);\t","\tfor (i = 0; i < n; i++)  {","\t\troiManager(\"select\",i);\t\t","\t\tL = getVal(x,i,\"label\");","\t\tif (L >= 0) {","\t\t\tRoi.setStrokeColor(cmap[L]);\t\t","\t\t}","\t}","}","","function groupFeat(x,R) {\t","\tprint(\"Grouping radius is \" + R);","\tn = getNumEntry(x);","\tL = 0;","\tD = computeDistanceMatrix(x);\t\t","\tsetVal(x,0,\"label\",0);","\tfor (i = 0; i < n; i++)  {","\t\tli = getVal(x,i,\"label\");\t\t","\t\tdmin = 1e6;","\t\tjmin = -1; \t\t\t","\t\tfor (j = 0; j < n; j++) if (i!=j) {\t\t","\t\t\tlj = getVal(x,j,\"label\");","\t\t\tif (D[i+n*j] < dmin && lj != -1) {","\t\t\t\tdmin = D[i+n*j];","\t\t\t\tjmin = j;","\t\t\t}","\t\t}","\t\t//print(i + \"-\" + jmin + \", d =\" + dmin);\t\t\t\t","\t\tif (dmin < R && jmin >= 0) {\t\t\t","\t\t\tlj = getVal(x,jmin,\"label\");","\t\t\tsetVal(x,i,\"label\",lj);\t\t\t","\t\t} else {","\t\t\tsetVal(x,i,\"label\",L);","\t\t\tL = L + 1;","\t\t}\t\t\t\t\t","\t}","\treturn L;","}","","function computeDistanceMatrix(x) {","\tn = getNumEntry(x);","\tD = newArray(n*n);","\tfor (i = 0; i < n; i++)  {","\t\txi = getVal(x,i,\"x\");","\t\tyi = getVal(x,i,\"y\");","\t\tzi = getVal(x,i,\"z\");","\t\tti = getVal(x,i,\"t\");","\t\tfor (j = 0; j < n; j++) {","\t\t\tdx = getVal(x,j,\"x\") - xi;\t\t\t\t\t\t\t","\t\t\tdy = getVal(x,j,\"y\") - yi;\t\t\t\t","\t\t\tdz = getVal(x,j,\"z\") - zi;\t\t\t","\t\t\tD[i+n*j] = sqrt(dx*dx+dy*dy+dz*dz);","\t\t}","\t}","\treturn D;","}","","function printFeat(X){","\tn = getNumEntry(X);","\tfor (i = 0; i < n; i++)  {","\t\tsetResult(\"x\", i, getVal(X,i,\"x\"));","\t\tsetResult(\"y\", i, getVal(X,i,\"y\"));","\t\tsetResult(\"z\", i, getVal(X,i,\"z\"));","\t\tsetResult(\"t\", i, getVal(X,i,\"t\"));","\t\tsetResult(\"i\", i, getVal(X,i,\"i\"));","\t\tsetResult(\"label\", i, getVal(X,i,\"label\"));\t\t\t","\t}","\tupdateResults();","}","// return a 2D ARRAY x,y,z,t,i,label for each roi in pixels","function roi2feat() {\t","\tn = roiManager(\"count\");","\tN = 6*n;","\tx = newArray(N);// x,y,z,t,i,label nx6\t\t","\tgetVoxelSize(dx, dy, dz, unit)","\tfor (i = 0; i < n; i++) {\t\t","\t\troiManager(\"select\", i);","\t\tStack.getPosition(channel, slice, frame);\t\t","\t\tList.setMeasurements;","\t\txi = List.getValue(\"X\");","\t\tyi = List.getValue(\"Y\");","\t\tmi = List.getValue(\"Mean\");\t\t","\t\tsetVal(x,i,\"x\",xi / dx);","\t\tsetVal(x,i,\"y\",yi / dy);","\t\tsetVal(x,i,\"z\",slice);\t\t","\t\tsetVal(x,i,\"i\",mi);","\t\tsetVal(x,i,\"t\",frame);\t","\t\tsetVal(x,i,\"label\",-1);\t","\t}","\t//printFeat(x);","\treturn x;","}","","function setVal(x,i,field,value) {","\tidx = getIndex(x,i,field);\t","\tx[idx] = value;","\treturn x;","}","","function getVal(x,i,field) {","\tidx = getIndex(x,i,field);\t","\tvalue = x[idx];\t","\treturn parseFloat(value);","}","","function getNumEntry(x) {","\treturn x.length/6;","}","","function getNumLabels(x) {","\tlmax = 0;","\tn = getNumEntry(x);","\tfor (i = 0; i < n; i++) {","\t\tl = getVal(x,i,\"label\");","\t\tif (l>L) {","\t\t\tlmax = l;","\t\t}","\t}","\treturn lmax+1;","}","","function getIndex(x,i,field) {","\ta = newArray(\"x\",\"y\",\"z\",\"t\",\"i\",\"label\");","\tj = 0;","\tfor (k = 0; k < a.length; k++) {","\t\tif (matches(a[k], field)) {","\t\t\tj = k;\t","\t\t}","\t}","\tidx = j+6*i;","\tif (idx >= x.length || idx < 0) {print(\"Out of bound (\"+i+\",\"+field+\")\");}","\treturn idx;","}"],"stylingDirectivescsv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/jboulanger/imagej-macro/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":false,"repoAlertsPath":"/jboulanger/imagej-macro/security/dependabot","repoSecurityAndAnalysisPath":"/jboulanger/imagej-macro/settings/security_analysis","repoOwnerIsOrg":false,"currentUserCanAdminRepo":false},"displayName":"FRAP_measure.ijm","displayUrl":"https://github.com/jboulanger/imagej-macro/blob/main/FRAP_Measure/FRAP_measure.ijm?raw=true","headerInfo":{"blobSize":"12.6 KB","deleteInfo":{"deleteTooltip":"Fork this repository and delete the file"},"editInfo":{"editTooltip":"Fork this repository and edit the file"},"ghDesktopPath":"https://desktop.github.com","gitLfsPath":null,"onBranch":true,"shortPath":"059274c","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fjboulanger%2Fimagej-macro%2Fblob%2Fmain%2FFRAP_Measure%2FFRAP_measure.ijm","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"536","truncatedSloc":"505"},"mode":"file"},"image":false,"isCodeownersFile":null,"isPlain":false,"isValidLegacyIssueTemplate":false,"issueTemplateHelpUrl":"https://docs.github.com/articles/about-issue-and-pull-request-templates","issueTemplate":null,"discussionTemplate":null,"language":"ImageJ Macro","languageID":575143428,"large":false,"loggedIn":true,"newDiscussionPath":"/jboulanger/imagej-macro/discussions/new","newIssuePath":"/jboulanger/imagej-macro/issues/new","planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/jboulanger/imagej-macro/blob/main/FRAP_Measure/FRAP_measure.ijm","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","dismissStackNoticePath":"/settings/dismiss-notice/publish_stack_from_file","releasePath":"/jboulanger/imagej-macro/releases/new?marketplace=true","showPublishActionBanner":false,"showPublishStackBanner":false},"rawBlobUrl":"https://github.com/jboulanger/imagej-macro/raw/main/FRAP_Measure/FRAP_measure.ijm","renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"shortPath":null,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"repoOwner":"jboulanger","repoName":"imagej-macro","showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","showDependabotConfigurationBanner":false,"actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timedOut":false,"notAnalyzed":true,"symbols":[]}},"copilotInfo":{"documentationUrl":"https://docs.github.com/copilot/overview-of-github-copilot/about-github-copilot-for-individuals","notices":{"codeViewPopover":{"dismissed":false,"dismissPath":"/settings/dismiss-notice/code_view_copilot_popover"}},"userAccess":{"accessAllowed":false,"hasSubscriptionEnded":false,"orgHasCFBAccess":false,"userHasCFIAccess":false,"userHasOrgs":false,"userIsOrgAdmin":false,"userIsOrgMember":false,"business":null,"featureRequestInfo":null}},"copilotAccessAllowed":false,"csrf_tokens":{"/jboulanger/imagej-macro/branches":{"post":"pNS2E2gpKCk_C5kHZWLZX9ITijgD901MDSZZOp6a0qiPCLjIXIZCX3PFmftm58gdpb938NOGbK70KcdPvjBnmw"},"/repos/preferences":{"post":"y2dl94uF3cyX_-u6ZcySwAaagEFgbAkXjlP--etBcC8_TVTKF-QwqukRp4ImWwBjyMKmvPz0iZtzyzVoGe6u-g"}}},"title":"imagej-macro/FRAP_Measure/FRAP_measure.ijm at main · jboulanger/imagej-macro"}